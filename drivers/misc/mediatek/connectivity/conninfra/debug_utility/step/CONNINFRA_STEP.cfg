// Action                                      | symbol | Param1                | Param2                  | Param3        | Param4                | Param5
// Read EMI                                    | _EMI   | R(0)                  | Begin offset            | End offset
// Read EMI to temp register                   | _EMI   | R(0)                  | offset                  | Temp Reg ID($)
// Read EMI to temp register                   | _EMI   | R(0)                  | offset                  | mask          | Temp Reg ID ($)
// Read CR                                     | _REG   | R(0)                  | Pre-define base-addr ID | offset        | times                 | delay time(ms)
// Read CR                                     | _REG   | R(0)                  | AP Physical address     | offset        | times                 | delay time(ms)
// Read CR to temp register                    | _REG   | R(0)                  | Pre-define base-addr ID | offset        | Temp Reg ID($)
// Read CR to temp register                    | _REG   | R(0)                  | AP Physical address     | offset        | Temp Reg ID($)
// Read CR to temp register                    | _REG   | R(0)                  | Pre-define base-addr ID | offset        | mask                  | Temp Reg ID($)
// Read CR to temp register                    | _REG   | R(0)                  | AP Physical address     | offset        | mask                  | Temp Reg ID($)
// Write CR                                    | _REG   | W(1)                  | Pre-define base-addr ID | offset        | value
// Write CR                                    | _REG   | W(1)                  | AP Physical address     | offset        | value
// Write CR some bit                           | _REG   | W(1)                  | Pre-define base-addr ID | offset        | value                 | mask
// Write CR some bit                           | _REG   | W(1)                  | AP Physical address     | offset        | value                 | mask
// Read GPIO                                   | GPIO   | R(0)                  | Pin number

// Show message                                | SHOW   | String(No space)

// Check condition to result temp register     | COND   | Result Temp Reg ID($) | Left Temp Reg ID($)     | Operator      | Right Temp Reg ID($)
// Check condition to result temp register     | COND   | Result Temp Reg ID($) | Left Temp Reg ID($)     | Operator      | Value(Dec or Hex)
// Save value to temp register                 | _VAL   | Temp Reg ID($)        | Value
//
// Condition Action                            | symbol | Param1                   | Param2 | Param3                  | Param4         | Param5          | Param6
// Read EMI with Condition                     | CEMI   | Condition Temp Reg ID($) | R(0)   | Begin offset            | End offset
// Read EMI to temp register with Condition    | CEMI   | Condition Temp Reg ID($) | R(0)   | Begin offset            | Temp Reg ID($)
// Read EMI to temp register with Condition    | CEMI   | Condition Temp Reg ID($) | R(0)   | Begin offset            | mask           | Temp Reg ID($)
// Read CR with Condition                      | CREG   | Condition Temp Reg ID($) | R(0)   | Pre-define base-addr ID | offset         | times           | delay time(ms)
// Read CR with Condition                      | CREG   | Condition Temp Reg ID($) | R(0)   | AP Physical address     | offset         | times           | delay time(ms)
// Read CR to temp register with Condition     | CREG   | Condition Temp Reg ID($) | R(0)   | Pre-define base-addr ID | offset         | Temp Reg ID($)
// Read CR to temp register with Condition     | CREG   | Condition Temp Reg ID($) | R(0)   | AP Physical address     | offset         | Temp Reg ID($)
// Read CR to temp register with Condition     | CREG   | Condition Temp Reg ID($) | R(0)   | Pre-define base-addr ID | offset         | mask            | Temp Reg ID($)
// Read CR to temp register with Condition     | CREG   | Condition Temp Reg ID($) | R(0)   | AP Physical address     | offset         | mask            | Temp Reg ID($)
// Write CR with Condition                     | CREG   | Condition Temp Reg ID($) | W(1)   | Pre-define base-addr ID | offset         | value
// Write CR with Condition                     | CREG   | Condition Temp Reg ID($) | W(1)   | AP Physical address     | offset         | value
// Write CR some bit with Condition            | CREG   | Condition Temp Reg ID($) | W(1)   | Pre-define base-addr ID | offset         | value           | mask
// Write CR some bit with Condition            | CREG   | Condition Temp Reg ID($) | W(1)   | AP Physical address     | offset         | value           | mask
//
// Periodic dump: Add PD in trigger point
// [TP x] Trigger point
// [PD+] ms
//  [AT] xxxx
//  [AT] xxxx
// [PD-]
//
// Temp Reg ID: ($0 ~ $9)
//
// Operator: ==, !=, >, >=, <, <=, &&, ||
//
// Pre-define base-addr ID: (You can find address and size in DTS file)
// alps/kernel-4.9/arch/arm64/boot/dts/mediatek/mt6885.dts
//								base		/	size
// #1 ==> conn_infra_rgu 		0x18000000	/	0x1000
// #2 ==> conn_infra_cfg		0x18001000	/	0x1000
// #3 ==> conn_host_csr_top		0x18060000	/	0x10000
// #4 ==> infracfg_ao			0x10001000	/	0x1000
// #5 ==> TOP RGU				0x10007000  /	0x1000
// #6 ==> SPM					0x10006000	/	0x1000
// #7 ==> INFRACFG				0x1020e000	/	0x1000
// #8 ==> conn_wt_slp_ctl_reg	0x18005000	/	0x1000
// #9 ==> conn_afe_ctl			0x18003000	/	0x1000
// #10 ==> conn_infra_sysram	0x18050000	/	0x10000
// #11 ==> GPIO					0x10005000	/	0x1000
// #12 ==> conn_rf_spi_mst_reg	0x18004000	/	0x1000
// #13 ==> conn_semaphore		0x18070000	/	0x10000
// #14 ==> conn_top_therm_ctl	0x18002000	/	0x1000
// #15 ==> IOCFG_RT				0x11ea0000	/	0x1000

// **********************  CONNINFRA  ************************* //
[TP CONNINFRA 1] Before Chip reset
    [AT] _REG 0 #2 0x000 1 0

[TP CONNINFRA 2] After Chip reset

[TP CONNINFRA 3] Before read consys thermal
    [AT] _REG 0 #2 0x000 1 0

[TP CONNINFRA 4] Power on sequence(0): Start power on

[TP CONNINFRA 5] Power on sequence(1): Before can get connsys id

[TP CONNINFRA 6] Power on sequence(6): End power on

[TP CONNINFRA 7] Before CONNINFRA power off

[TP CONNINFRA 8] When AP suspend

[TP CONNINFRA 9] When AP resume
    [AT] _REG 0 #2 0x000 1 0


// **********************  WF  ************************* //
[TP WF 1] Command timeout
[TP WF 2] Before Chip reset
[TP WF 3] After Chip reset


// **********************  BT  ************************* //
[TP BT 1] Command timeout
[TP BT 2] Before Chip reset
[TP BT 3] After Chip reset


// **********************  GPS  ************************ //
[TP GPS 1] Command timeout
[TP GPS 2] Before Chip reset
[TP GPS 3] After Chip reset


// **********************  FM  ************************* //
[TP FM 1] Command timeout
[TP FM 2] Before Chip reset
[TP FM 3] After Chip reset
